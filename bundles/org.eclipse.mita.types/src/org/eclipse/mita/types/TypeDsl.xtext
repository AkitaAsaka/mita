/********************************************************************************
 * Copyright (c) 2017, 2018 Bosch Connected Devices and Solutions GmbH.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * Contributors:
 *    Bosch Connected Devices and Solutions GmbH - initial contribution
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/

grammar org.eclipse.mita.types.TypeDsl with org.yakindu.base.expressions.Expressions

import "org.eclipse.mita.types"
import "http://www.yakindu.org/base/types/2.0.0" as types

TypeRoot returns types::Package:
	{types::Package}
	(member+=TypeDeclaration)* 
;

TypeDeclaration returns types::Type:
	(NativeTypeDeclaration | StructureTypeDeclaration | ExceptionTypeDeclaration | EnumerationDeclaration | GeneratedType | SumType) 
;

NativeTypeDeclaration returns NativeType:
	(exported?='export')? 
	'native-type' name=ID
	('alias-of' aliasOf=ID)?
	('subtype-of' superTypes+=[types::PrimitiveType] (',' superTypes+=[types::PrimitiveType])* )?
	('header' header=STRING)?
;

EnumerationDeclaration returns EnumerationType:
	(exported?='export')?
	'enum' name=ID '{' enumerator+=Enumerator (','enumerator+=Enumerator)*
	'}';

Enumerator returns types::Enumerator:
	name=ID;

StructureTypeDeclaration returns types::ComplexType: 
	{StructureType}
	(exported?='export')?
	'struct' name=ID '{' (parameters+=StructureField)+ '}'
;

StructureField returns types::Parameter: 
	'var' name=ID ':' typeSpecifier=TypeSpecifier ';'
;

@Override 
TypeSpecifier returns TypeSpecifier hidden():
	{TypeSpecifier} (referenceModifiers+=('&' | LogicalAndOperator))* type=[types::Type|QID] (WS? '<' (WS? typeArguments+=TypeSpecifier (WS? ',' WS? typeArguments+=TypeSpecifier)* WS? '>'))? (optional?="?")?
;

ExceptionTypeDeclaration: 
	(exported?='export')?
	'exception' name=ID ';'
;

GeneratedType returns types::ComplexType:
	{GeneratedType} 
	(exported?='export')?
	'generated' 'type' name=ID ('<' (typeParameters+=TypeParameter) (',' typeParameters+=TypeParameter)* '>')? ('subtype-of' superTypes+=[types::ComplexType|QID])?
		'generator' generator=STRING
		'size-inferrer' sizeInferrer=STRING
		('validator' validator=STRING)?
		constructor = GeneratedTypeConstructor
	';'
;

GeneratedTypeConstructor returns types::Operation:
	{types::Operation}
	'constructor' name=ID '(' (parameters+=GeneratedTypeParameter (',' parameters+=GeneratedTypeParameter)*)? ')'
;

GeneratedTypeParameter returns types::Parameter:
	{GeneratedTypeParameter}
	name=ID ':' (static?='static')? typeSpecifier=TypeSpecifier (optional?='=' value=Expression)?
;

TypeParameter returns types::TypeParameter:
	name=ID ('extends' bound=[types::Type])?;


SumType returns SumType:
	{SumType}
	(exported?='export')?
	('alt' | 'alternative') name = ID '{' alternatives += SumAlternative ('|' alternatives += SumAlternative)* '}'
;	

SumAlternative returns SumAlternative:
	( AnonymousProductType
	| NamedProductType 
	| Singleton
	)
;

Singleton returns Singleton:
	name=ID
;

AnonymousProductType returns AnonymousProductType: 
	{AnonymousProductType}
	name=ID ':' typeSpecifiers+=TypeSpecifier (',' typeSpecifiers+=TypeSpecifier)*
;
NamedProductType returns NamedProductType:
	{NamedProductType}
	name=ID ':' '{' parameters+=ProductMember (',' parameters+=ProductMember)* '}'
;

ProductMember returns ProductMember: 
	name=ID ':' typeSpecifier=TypeSpecifier
;
